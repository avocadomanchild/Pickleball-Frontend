{"ast":null,"code":"// import { useRef, useState, useEffect } from 'react';\n// import {\n// \tfaCheck,\n// \tfaTimes,\n// \tfaInfoCircle,\n// } from '@fortawesome/free-solid-svg-icons';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import Login from './Login';\n// import axios from './api/axios';\n\n// const USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\n// const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\n// const REGISTER_URL = '/register';\n\n// const Register = () => {\n// \tconst userRef = useRef();\n// \tconst errRef = useRef();\n\n// \tconst [user, setUser] = useState('');\n// \tconst [validName, setValidName] = useState(false);\n// \tconst [userFocus, setUserFocus] = useState(false);\n\n// \tconst [pwd, setPwd] = useState('');\n// \tconst [validPwd, setValidPwd] = useState(false);\n// \tconst [pwdFocus, setPwdFocus] = useState(false);\n\n// \tconst [matchPwd, setMatchPwd] = useState('');\n// \tconst [validMatch, setValidMatch] = useState(false);\n// \tconst [matchFocus, setMatchFocus] = useState(false);\n\n// \tconst [errMsg, setErrMsg] = useState('');\n// \tconst [success, setSuccess] = useState(false);\n\n// \tuseEffect(() => {\n// \t\tuserRef.current.focus();\n// \t}, []);\n\n// \tuseEffect(() => {\n// \t\tsetValidName(USER_REGEX.test(user));\n// \t}, [user]);\n\n// \tuseEffect(() => {\n// \t\tsetValidPwd(PWD_REGEX.test(pwd));\n// \t\tsetValidMatch(pwd === matchPwd);\n// \t}, [pwd, matchPwd]);\n\n// \tuseEffect(() => {\n// \t\tsetErrMsg('');\n// \t}, [user, pwd, matchPwd]);\n\n// \tconst handleSubmit = async (e) => {\n// \t\te.preventDefault();\n// \t\t// if button enabled with JS hack\n// \t\tconst v1 = USER_REGEX.test(user);\n// \t\tconst v2 = PWD_REGEX.test(pwd);\n// \t\tif (!v1 || !v2) {\n// \t\t\tsetErrMsg('Invalid Entry');\n// \t\t\treturn;\n// \t\t}\n// \t\ttry {\n// \t\t\tconst response = await axios.post(\n// \t\t\t\tREGISTER_URL,\n// \t\t\t\tJSON.stringify({ user, pwd }),\n// \t\t\t\t{\n// \t\t\t\t\theaders: { 'Content-Type': 'application/json' },\n// \t\t\t\t\twithCredentials: true,\n// \t\t\t\t}\n// \t\t\t);\n// \t\t\t// TODO: remove console.logs before deployment\n// \t\t\tconsole.log(JSON.stringify(response?.data));\n// \t\t\tsetSuccess(true);\n// \t\t\t//clear state and controlled inputs\n// \t\t\tsetUser('');\n// \t\t\tsetPwd('');\n// \t\t\tsetMatchPwd('');\n// \t\t} catch (err) {\n// \t\t\tif (!err?.response) {\n// \t\t\t\tsetErrMsg('No Server Response');\n// \t\t\t} else if (err.response?.status === 409) {\n// \t\t\t\tsetErrMsg('Username Taken');\n// \t\t\t} else {\n// \t\t\t\tsetErrMsg('Registration Failed');\n// \t\t\t}\n// \t\t\terrRef.current.focus();\n// \t\t}\n// \t};\n\n// \treturn (\n// \t\t<>\n// \t\t\t{success ? (\n// \t\t\t\t<Login />\n// \t\t\t) : (\n// \t\t\t\t<section >\n// \t\t\t\t\t<p\n// \t\t\t\t\t\tref={errRef}\n// \t\t\t\t\t\tclassName={errMsg ? 'errmsg' : 'offscreen'}\n// \t\t\t\t\t\taria-live=\"assertive\"\n// \t\t\t\t\t>\n// \t\t\t\t\t\t{errMsg}\n// \t\t\t\t\t</p>\n// \t\t\t\t\t<h1>Register</h1>\n// \t\t\t\t\t<form onSubmit={handleSubmit}>\n// \t\t\t\t\t\t<label htmlFor=\"username\">\n// \t\t\t\t\t\t\tUsername:\n// \t\t\t\t\t\t\t<FontAwesomeIcon\n// \t\t\t\t\t\t\t\ticon={faCheck}\n// \t\t\t\t\t\t\t\tclassName={validName ? 'valid' : 'hide'}\n// \t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t\t<FontAwesomeIcon\n// \t\t\t\t\t\t\t\ticon={faTimes}\n// \t\t\t\t\t\t\t\tclassName={validName || !user ? 'hide' : 'invalid'}\n// \t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t</label>\n// \t\t\t\t\t\t<input\n// \t\t\t\t\t\t\ttype=\"text\"\n// \t\t\t\t\t\t\tid=\"username\"\n// \t\t\t\t\t\t\tref={userRef}\n// \t\t\t\t\t\t\tautoComplete=\"off\"\n// \t\t\t\t\t\t\tonChange={(e) => setUser(e.target.value)}\n// \t\t\t\t\t\t\tvalue={user}\n// \t\t\t\t\t\t\trequired\n// \t\t\t\t\t\t\taria-invalid={validName ? 'false' : 'true'}\n// \t\t\t\t\t\t\taria-describedby=\"uidnote\"\n// \t\t\t\t\t\t\tonFocus={() => setUserFocus(true)}\n// \t\t\t\t\t\t\tonBlur={() => setUserFocus(false)}\n// \t\t\t\t\t\t/>\n// \t\t\t\t\t\t<p\n// \t\t\t\t\t\t\tid=\"uidnote\"\n// \t\t\t\t\t\t\tclassName={\n// \t\t\t\t\t\t\t\tuserFocus && user && !validName ? 'instructions' : 'offscreen'\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\t<FontAwesomeIcon icon={faInfoCircle} />\n// \t\t\t\t\t\t\t4 to 24 characters.\n// \t\t\t\t\t\t\t<br />\n// \t\t\t\t\t\t\tMust begin with a letter.\n// \t\t\t\t\t\t\t<br />\n// \t\t\t\t\t\t\tLetters, numbers, underscores, hyphens allowed.\n// \t\t\t\t\t\t</p>\n\n// \t\t\t\t\t\t<label htmlFor=\"password\">\n// \t\t\t\t\t\t\tPassword:\n// \t\t\t\t\t\t\t<FontAwesomeIcon\n// \t\t\t\t\t\t\t\ticon={faCheck}\n// \t\t\t\t\t\t\t\tclassName={validPwd ? 'valid' : 'hide'}\n// \t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t\t<FontAwesomeIcon\n// \t\t\t\t\t\t\t\ticon={faTimes}\n// \t\t\t\t\t\t\t\tclassName={validPwd || !pwd ? 'hide' : 'invalid'}\n// \t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t</label>\n// \t\t\t\t\t\t<input\n// \t\t\t\t\t\t\ttype=\"password\"\n// \t\t\t\t\t\t\tid=\"password\"\n// \t\t\t\t\t\t\tonChange={(e) => setPwd(e.target.value)}\n// \t\t\t\t\t\t\tvalue={pwd}\n// \t\t\t\t\t\t\trequired\n// \t\t\t\t\t\t\taria-invalid={validPwd ? 'false' : 'true'}\n// \t\t\t\t\t\t\taria-describedby=\"pwdnote\"\n// \t\t\t\t\t\t\tonFocus={() => setPwdFocus(true)}\n// \t\t\t\t\t\t\tonBlur={() => setPwdFocus(false)}\n// \t\t\t\t\t\t/>\n// \t\t\t\t\t\t<p\n// \t\t\t\t\t\t\tid=\"pwdnote\"\n// \t\t\t\t\t\t\tclassName={pwdFocus && !validPwd ? 'instructions' : 'offscreen'}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\t<FontAwesomeIcon icon={faInfoCircle} />\n// \t\t\t\t\t\t\t8 to 24 characters.\n// \t\t\t\t\t\t\t<br />\n// \t\t\t\t\t\t\tMust include uppercase and lowercase letters, a number and a\n// \t\t\t\t\t\t\tspecial character.\n// \t\t\t\t\t\t\t<br />\n// \t\t\t\t\t\t\tAllowed special characters:{' '}\n// \t\t\t\t\t\t\t<span aria-label=\"exclamation mark\">!</span>{' '}\n// \t\t\t\t\t\t\t<span aria-label=\"at symbol\">@</span>{' '}\n// \t\t\t\t\t\t\t<span aria-label=\"hashtag\">#</span>{' '}\n// \t\t\t\t\t\t\t<span aria-label=\"dollar sign\">$</span>{' '}\n// \t\t\t\t\t\t\t<span aria-label=\"percent\">%</span>\n// \t\t\t\t\t\t</p>\n\n// \t\t\t\t\t\t<label htmlFor=\"confirm_pwd\">\n// \t\t\t\t\t\t\tConfirm Password:\n// \t\t\t\t\t\t\t<FontAwesomeIcon\n// \t\t\t\t\t\t\t\ticon={faCheck}\n// \t\t\t\t\t\t\t\tclassName={validMatch && matchPwd ? 'valid' : 'hide'}\n// \t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t\t<FontAwesomeIcon\n// \t\t\t\t\t\t\t\ticon={faTimes}\n// \t\t\t\t\t\t\t\tclassName={validMatch || !matchPwd ? 'hide' : 'invalid'}\n// \t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t</label>\n// \t\t\t\t\t\t<input\n// \t\t\t\t\t\t\ttype=\"password\"\n// \t\t\t\t\t\t\tid=\"confirm_pwd\"\n// \t\t\t\t\t\t\tonChange={(e) => setMatchPwd(e.target.value)}\n// \t\t\t\t\t\t\tvalue={matchPwd}\n// \t\t\t\t\t\t\trequired\n// \t\t\t\t\t\t\taria-invalid={validMatch ? 'false' : 'true'}\n// \t\t\t\t\t\t\taria-describedby=\"confirmnote\"\n// \t\t\t\t\t\t\tonFocus={() => setMatchFocus(true)}\n// \t\t\t\t\t\t\tonBlur={() => setMatchFocus(false)}\n// \t\t\t\t\t\t/>\n// \t\t\t\t\t\t<p\n// \t\t\t\t\t\t\tid=\"confirmnote\"\n// \t\t\t\t\t\t\tclassName={\n// \t\t\t\t\t\t\t\tmatchFocus && !validMatch ? 'instructions' : 'offscreen'\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\t<FontAwesomeIcon icon={faInfoCircle} />\n// \t\t\t\t\t\t\tMust match the first password input field.\n// \t\t\t\t\t\t</p>\n\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tdisabled={!validName || !validPwd || !validMatch ? true : false}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\tSign Up\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</form>\n// \t\t\t\t\t<p>\n// \t\t\t\t\t\tAlready registered?\n// \t\t\t\t\t\t<br />\n// \t\t\t\t\t\t<span className=\"line\">\n// \t\t\t\t\t\t\t<a href=\"/login\">Sign In</a>\n// \t\t\t\t\t\t</span>\n// \t\t\t\t\t</p>\n// \t\t\t\t</section>\n// \t\t\t)}\n// \t\t</>\n// \t);\n// };\n\n// export default Register;","map":{"version":3,"names":[],"sources":["C:/Users/bench/OneDrive/Documents/Travel App/react-website-v1/src/components/pages/register2.js"],"sourcesContent":["// import { useRef, useState, useEffect } from 'react';\r\n// import {\r\n// \tfaCheck,\r\n// \tfaTimes,\r\n// \tfaInfoCircle,\r\n// } from '@fortawesome/free-solid-svg-icons';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// import Login from './Login';\r\n// import axios from './api/axios';\r\n\r\n// const USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\r\n// const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\r\n// const REGISTER_URL = '/register';\r\n\r\n// const Register = () => {\r\n// \tconst userRef = useRef();\r\n// \tconst errRef = useRef();\r\n\r\n// \tconst [user, setUser] = useState('');\r\n// \tconst [validName, setValidName] = useState(false);\r\n// \tconst [userFocus, setUserFocus] = useState(false);\r\n\r\n// \tconst [pwd, setPwd] = useState('');\r\n// \tconst [validPwd, setValidPwd] = useState(false);\r\n// \tconst [pwdFocus, setPwdFocus] = useState(false);\r\n\r\n// \tconst [matchPwd, setMatchPwd] = useState('');\r\n// \tconst [validMatch, setValidMatch] = useState(false);\r\n// \tconst [matchFocus, setMatchFocus] = useState(false);\r\n\r\n// \tconst [errMsg, setErrMsg] = useState('');\r\n// \tconst [success, setSuccess] = useState(false);\r\n\r\n// \tuseEffect(() => {\r\n// \t\tuserRef.current.focus();\r\n// \t}, []);\r\n\r\n// \tuseEffect(() => {\r\n// \t\tsetValidName(USER_REGEX.test(user));\r\n// \t}, [user]);\r\n\r\n// \tuseEffect(() => {\r\n// \t\tsetValidPwd(PWD_REGEX.test(pwd));\r\n// \t\tsetValidMatch(pwd === matchPwd);\r\n// \t}, [pwd, matchPwd]);\r\n\r\n// \tuseEffect(() => {\r\n// \t\tsetErrMsg('');\r\n// \t}, [user, pwd, matchPwd]);\r\n\r\n// \tconst handleSubmit = async (e) => {\r\n// \t\te.preventDefault();\r\n// \t\t// if button enabled with JS hack\r\n// \t\tconst v1 = USER_REGEX.test(user);\r\n// \t\tconst v2 = PWD_REGEX.test(pwd);\r\n// \t\tif (!v1 || !v2) {\r\n// \t\t\tsetErrMsg('Invalid Entry');\r\n// \t\t\treturn;\r\n// \t\t}\r\n// \t\ttry {\r\n// \t\t\tconst response = await axios.post(\r\n// \t\t\t\tREGISTER_URL,\r\n// \t\t\t\tJSON.stringify({ user, pwd }),\r\n// \t\t\t\t{\r\n// \t\t\t\t\theaders: { 'Content-Type': 'application/json' },\r\n// \t\t\t\t\twithCredentials: true,\r\n// \t\t\t\t}\r\n// \t\t\t);\r\n// \t\t\t// TODO: remove console.logs before deployment\r\n// \t\t\tconsole.log(JSON.stringify(response?.data));\r\n// \t\t\tsetSuccess(true);\r\n// \t\t\t//clear state and controlled inputs\r\n// \t\t\tsetUser('');\r\n// \t\t\tsetPwd('');\r\n// \t\t\tsetMatchPwd('');\r\n// \t\t} catch (err) {\r\n// \t\t\tif (!err?.response) {\r\n// \t\t\t\tsetErrMsg('No Server Response');\r\n// \t\t\t} else if (err.response?.status === 409) {\r\n// \t\t\t\tsetErrMsg('Username Taken');\r\n// \t\t\t} else {\r\n// \t\t\t\tsetErrMsg('Registration Failed');\r\n// \t\t\t}\r\n// \t\t\terrRef.current.focus();\r\n// \t\t}\r\n// \t};\r\n\r\n// \treturn (\r\n// \t\t<>\r\n// \t\t\t{success ? (\r\n// \t\t\t\t<Login />\r\n// \t\t\t) : (\r\n// \t\t\t\t<section >\r\n// \t\t\t\t\t<p\r\n// \t\t\t\t\t\tref={errRef}\r\n// \t\t\t\t\t\tclassName={errMsg ? 'errmsg' : 'offscreen'}\r\n// \t\t\t\t\t\taria-live=\"assertive\"\r\n// \t\t\t\t\t>\r\n// \t\t\t\t\t\t{errMsg}\r\n// \t\t\t\t\t</p>\r\n// \t\t\t\t\t<h1>Register</h1>\r\n// \t\t\t\t\t<form onSubmit={handleSubmit}>\r\n// \t\t\t\t\t\t<label htmlFor=\"username\">\r\n// \t\t\t\t\t\t\tUsername:\r\n// \t\t\t\t\t\t\t<FontAwesomeIcon\r\n// \t\t\t\t\t\t\t\ticon={faCheck}\r\n// \t\t\t\t\t\t\t\tclassName={validName ? 'valid' : 'hide'}\r\n// \t\t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t\t<FontAwesomeIcon\r\n// \t\t\t\t\t\t\t\ticon={faTimes}\r\n// \t\t\t\t\t\t\t\tclassName={validName || !user ? 'hide' : 'invalid'}\r\n// \t\t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t</label>\r\n// \t\t\t\t\t\t<input\r\n// \t\t\t\t\t\t\ttype=\"text\"\r\n// \t\t\t\t\t\t\tid=\"username\"\r\n// \t\t\t\t\t\t\tref={userRef}\r\n// \t\t\t\t\t\t\tautoComplete=\"off\"\r\n// \t\t\t\t\t\t\tonChange={(e) => setUser(e.target.value)}\r\n// \t\t\t\t\t\t\tvalue={user}\r\n// \t\t\t\t\t\t\trequired\r\n// \t\t\t\t\t\t\taria-invalid={validName ? 'false' : 'true'}\r\n// \t\t\t\t\t\t\taria-describedby=\"uidnote\"\r\n// \t\t\t\t\t\t\tonFocus={() => setUserFocus(true)}\r\n// \t\t\t\t\t\t\tonBlur={() => setUserFocus(false)}\r\n// \t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t<p\r\n// \t\t\t\t\t\t\tid=\"uidnote\"\r\n// \t\t\t\t\t\t\tclassName={\r\n// \t\t\t\t\t\t\t\tuserFocus && user && !validName ? 'instructions' : 'offscreen'\r\n// \t\t\t\t\t\t\t}\r\n// \t\t\t\t\t\t>\r\n// \t\t\t\t\t\t\t<FontAwesomeIcon icon={faInfoCircle} />\r\n// \t\t\t\t\t\t\t4 to 24 characters.\r\n// \t\t\t\t\t\t\t<br />\r\n// \t\t\t\t\t\t\tMust begin with a letter.\r\n// \t\t\t\t\t\t\t<br />\r\n// \t\t\t\t\t\t\tLetters, numbers, underscores, hyphens allowed.\r\n// \t\t\t\t\t\t</p>\r\n\r\n// \t\t\t\t\t\t<label htmlFor=\"password\">\r\n// \t\t\t\t\t\t\tPassword:\r\n// \t\t\t\t\t\t\t<FontAwesomeIcon\r\n// \t\t\t\t\t\t\t\ticon={faCheck}\r\n// \t\t\t\t\t\t\t\tclassName={validPwd ? 'valid' : 'hide'}\r\n// \t\t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t\t<FontAwesomeIcon\r\n// \t\t\t\t\t\t\t\ticon={faTimes}\r\n// \t\t\t\t\t\t\t\tclassName={validPwd || !pwd ? 'hide' : 'invalid'}\r\n// \t\t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t</label>\r\n// \t\t\t\t\t\t<input\r\n// \t\t\t\t\t\t\ttype=\"password\"\r\n// \t\t\t\t\t\t\tid=\"password\"\r\n// \t\t\t\t\t\t\tonChange={(e) => setPwd(e.target.value)}\r\n// \t\t\t\t\t\t\tvalue={pwd}\r\n// \t\t\t\t\t\t\trequired\r\n// \t\t\t\t\t\t\taria-invalid={validPwd ? 'false' : 'true'}\r\n// \t\t\t\t\t\t\taria-describedby=\"pwdnote\"\r\n// \t\t\t\t\t\t\tonFocus={() => setPwdFocus(true)}\r\n// \t\t\t\t\t\t\tonBlur={() => setPwdFocus(false)}\r\n// \t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t<p\r\n// \t\t\t\t\t\t\tid=\"pwdnote\"\r\n// \t\t\t\t\t\t\tclassName={pwdFocus && !validPwd ? 'instructions' : 'offscreen'}\r\n// \t\t\t\t\t\t>\r\n// \t\t\t\t\t\t\t<FontAwesomeIcon icon={faInfoCircle} />\r\n// \t\t\t\t\t\t\t8 to 24 characters.\r\n// \t\t\t\t\t\t\t<br />\r\n// \t\t\t\t\t\t\tMust include uppercase and lowercase letters, a number and a\r\n// \t\t\t\t\t\t\tspecial character.\r\n// \t\t\t\t\t\t\t<br />\r\n// \t\t\t\t\t\t\tAllowed special characters:{' '}\r\n// \t\t\t\t\t\t\t<span aria-label=\"exclamation mark\">!</span>{' '}\r\n// \t\t\t\t\t\t\t<span aria-label=\"at symbol\">@</span>{' '}\r\n// \t\t\t\t\t\t\t<span aria-label=\"hashtag\">#</span>{' '}\r\n// \t\t\t\t\t\t\t<span aria-label=\"dollar sign\">$</span>{' '}\r\n// \t\t\t\t\t\t\t<span aria-label=\"percent\">%</span>\r\n// \t\t\t\t\t\t</p>\r\n\r\n// \t\t\t\t\t\t<label htmlFor=\"confirm_pwd\">\r\n// \t\t\t\t\t\t\tConfirm Password:\r\n// \t\t\t\t\t\t\t<FontAwesomeIcon\r\n// \t\t\t\t\t\t\t\ticon={faCheck}\r\n// \t\t\t\t\t\t\t\tclassName={validMatch && matchPwd ? 'valid' : 'hide'}\r\n// \t\t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t\t<FontAwesomeIcon\r\n// \t\t\t\t\t\t\t\ticon={faTimes}\r\n// \t\t\t\t\t\t\t\tclassName={validMatch || !matchPwd ? 'hide' : 'invalid'}\r\n// \t\t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t</label>\r\n// \t\t\t\t\t\t<input\r\n// \t\t\t\t\t\t\ttype=\"password\"\r\n// \t\t\t\t\t\t\tid=\"confirm_pwd\"\r\n// \t\t\t\t\t\t\tonChange={(e) => setMatchPwd(e.target.value)}\r\n// \t\t\t\t\t\t\tvalue={matchPwd}\r\n// \t\t\t\t\t\t\trequired\r\n// \t\t\t\t\t\t\taria-invalid={validMatch ? 'false' : 'true'}\r\n// \t\t\t\t\t\t\taria-describedby=\"confirmnote\"\r\n// \t\t\t\t\t\t\tonFocus={() => setMatchFocus(true)}\r\n// \t\t\t\t\t\t\tonBlur={() => setMatchFocus(false)}\r\n// \t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t<p\r\n// \t\t\t\t\t\t\tid=\"confirmnote\"\r\n// \t\t\t\t\t\t\tclassName={\r\n// \t\t\t\t\t\t\t\tmatchFocus && !validMatch ? 'instructions' : 'offscreen'\r\n// \t\t\t\t\t\t\t}\r\n// \t\t\t\t\t\t>\r\n// \t\t\t\t\t\t\t<FontAwesomeIcon icon={faInfoCircle} />\r\n// \t\t\t\t\t\t\tMust match the first password input field.\r\n// \t\t\t\t\t\t</p>\r\n\r\n// \t\t\t\t\t\t<button\r\n// \t\t\t\t\t\t\tdisabled={!validName || !validPwd || !validMatch ? true : false}\r\n// \t\t\t\t\t\t>\r\n// \t\t\t\t\t\t\tSign Up\r\n// \t\t\t\t\t\t</button>\r\n// \t\t\t\t\t</form>\r\n// \t\t\t\t\t<p>\r\n// \t\t\t\t\t\tAlready registered?\r\n// \t\t\t\t\t\t<br />\r\n// \t\t\t\t\t\t<span className=\"line\">\r\n// \t\t\t\t\t\t\t<a href=\"/login\">Sign In</a>\r\n// \t\t\t\t\t\t</span>\r\n// \t\t\t\t\t</p>\r\n// \t\t\t\t</section>\r\n// \t\t\t)}\r\n// \t\t</>\r\n// \t);\r\n// };\r\n\r\n// export default Register;\r\n\r\n"],"mappings},"metadata":{},"sourceType":"module"}